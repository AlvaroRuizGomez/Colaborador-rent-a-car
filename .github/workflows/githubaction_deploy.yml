name: backend

# on:
#   push:
#     tags:
#       - 'v*'
    # branches:
    #   - backend

on:
  push:
    branches: [ backend ]
#   pull_request:
#     branches: [ backend ]

jobs:
  # test:
    # runs-on: ubuntu-20.04
    # steps:
      # - 
      #   name: Running Server & Testing API
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '14'
      #   run: |
      #     npm install
      #     NODE_ENV=production \
      #     PORT_BACKEND=${{ secrets.PORT_BACKEND }} \
      #     PORT_FRONTEND=${{ secrets.PORT_FRONTEND }} \
      #     REDISDB_PORT=${{ secrets.REDISDB_PORT }} \
      #     REDISDB_HOST=${{ secrets.REDISDB_HOST }} \
      #     REDISDB_PASSWORD=${{ secrets.REDISDB_PASSWORD }} \
      #     ENDPOINT_VARIABLES_FRONTEND=${{ secrets.ENDPOINT_VARIABLES_FRONTEND }} \
      #     node src/index.js
      #     NODE_ENV=production npm run test
      # - 
      #   name: Testing API
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '14'
      #   run: |
      #     NODE_ENV=production npm run test

  build_nginx:
    runs-on: ubuntu-20.04
    # if: "contains(github.event.*.message, 'subir')"
    # if: github.event.*.message === "subir"
    if: "contains(github.event.head_commit.message, '/a')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Get current date
        id: date
        run: echo ::set-output name=DATE_NOW::$(date +'%Y_%m_%dT%H_%M_%S')
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: ./nginx
          platforms: linux/amd64
          push: true
          tags: | 
            sosan/nginx-rentacarmallorca:${{steps.date.outputs.DATE_NOW}}
            sosan/nginx-rentacarmallorca:latest

      - name: Comandos SSH Servidor
        if: "contains(github.event.head_commit.message, '/b')"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_SERVIDOR }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY}}
          port:  ${{ secrets.PORT_SERVIDOR }}
          script: |
            cd /tmp
            mkdir certs
            echo ${{secrets.SERVER_KEY_SSL}} > ./certs/server.key && \
            echo ${{secrets.SERVER_CRT_SSL}} > ./certs/server.crt && \
            echo ${{secrets.SERVER_LOCAL_KEY_SSL}} > ./certs/server_local.key && \
            echo ${{secrets.SERVER_LOCAL_CRT_SSL}} > ./certs/server_local.crt && \


  build_backend:
    runs-on: ubuntu-20.04
    # if: "contains(github.event.*.message, 'subir')"
    # if: github.event.*.message === "subir"
    if: "contains(github.event.head_commit.message, '/a')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Get current date
        id: date
        run: echo ::set-output name=DATE_NOW::$(date +'%Y_%m_%dT%H_%M_%S')
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: | 
            sosan/backend-rentacarmallorca:${{steps.date.outputs.DATE_NOW}}
            sosan/backend-rentacarmallorca:latest
          secrets: |
            "PORT_BACKEND=${{ secrets.PORT_BACKEND }}"
            "PORT_FRONTEND=${{ secrets.PORT_FRONTEND }}"
            "PORT_BACKOFFICE=${{ secrets.PORT_BACKOFFICE }}"
            "REDISDB_PORT=${{ secrets.REDISDB_PORT }}"
            "REDISDB_HOST=${{ secrets.REDISDB_HOST }}"
            "REDISDB_PASSWORD=${{ secrets.REDISDB_PASSWORD }}"
            "ENDPOINT_VARIABLES_FRONTEND=${{ secrets.ENDPOINT_VARIABLES_FRONTEND }}"
            "TOKEN_FOR_BACKEND_ACCESS=${{ secrets.TOKEN_FOR_BACKEND_ACCESS }}"

      - name: Comandos SSH Servidor
        if: "contains(github.event.head_commit.message, '/b')"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_SERVIDOR }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY}}
          port:  ${{ secrets.PORT_SERVIDOR }}
          script: |
            ls && \
            echo ${{secrets.REDISDB_PASSWORD}} > /tmp/redisdb_password.txt && \
            echo ${{secrets.REDISDB_PORT}} > /tmp/redisdb_port.txt && \
            echo ${{secrets.REDISDB_HOST}} > /tmp/redisdb_host.txt && \
            echo ${{secrets.PORT_FRONTEND}} > /tmp/port_frontend.txt && \
            echo ${{secrets.PORT_BACKEND}} > /tmp/port_backend.txt && \
            echo ${{secrets.PORT_BACKOFFICE}} > /tmp/port_backoffice.txt && \
            echo ${{secrets.ENDPOINT_VARIABLES_FRONTEND}} > /tmp/endpoint_variables_frontend.txt && \
            echo ${{secrets.TOKEN_FOR_BACKEND_ACCESS}} > /tmp/token_for_backend_access.txt && \
            cat <<EOF > /tmp/deploy-compose.txt
            version: "3.7"
            networks:
              gateway: {}
            services:
              nginx:
                build:
                  context: "./"
                  dockerfile: "Dockerfile_nginx"
                  network: host
                  args:
                    - CERTBOT_EMAIL=servicios@rentcarmallorca.es
                    - DOMAIN_1=rentcarmallorca.es
                    - DOMAIN_2=www.rentcarmallorca.es
                restart: always
                deploy:
                  replicas: 1
                depends_on:
                  - frontend
                links: 
                  - frontend
                  - backoffice
                  - frontend_basico
                ports: 
                  - 80:80
                  - 443:443
                # secrets:
                #   - NGINX_URL_LOGIN_SECRET
                #volumes:
                # - ./nginx.conf:/opt/bitnami/nginx/conf/server_blocks/nginx.conf:ro
                # - ./certs:/certs
                networks:
                  - gateway
                  # - exterior
              frontend:
                restart: always
                deploy:
                  replicas: 1
                build:
                  context: "../colaborador-rent-a-car-frontend"
                  dockerfile: "Dockerfile"
                expose: 
                  - 8080
                environment:
                  URL_BACKEND: backend
                  URL_FRONTEND: frontend
                  NODE_ENV: production
                secrets:
                    - PORT_BACKEND
                    - ENDPOINT_VARIABLES_FRONTEND
                    - TOKEN_FOR_BACKEND_ACCESS
                networks:
                  - gateway
                  # - exterior
                  # - interior
                depends_on:
                  - backend
              backoffice:
                restart: always
                deploy:
                  replicas: 1
                build:
                  context: "../colaborador-rent-a-car-backoffice"
                  dockerfile: "Dockerfile"
                expose: 
                  - 3100
                environment:
                  URL_BACKEND: backend
                  URL_BACKOFFICE: backoffice
                  NODE_ENV: production
                secrets:
                    - PORT_BACKEND
                    - PORT_BACKOFFICE
                    - ENDPOINT_VARIABLES_FRONTEND
                    - TOKEN_FOR_BACKEND_ACCESS
                networks:
                  - gateway
                  # - exterior
                  # - interior
                depends_on:
                  - backend
              backend:
                restart: always
                deploy:
                  replicas: 1
                build:
                  context: "../colaborador-rent-a-car-backend"
                  dockerfile: "Dockerfile"
                expose: 
                  - 3000
                networks:
                  - gateway
                  # - interior
                secrets:
                  - PORT_FRONTEND
                  - PORT_BACKEND
                  - REDISDB_PORT
                  - REDISDB_HOST
                  - REDISDB_PASSWORD
                  - ENDPOINT_VARIABLES_FRONTEND
                  - TOKEN_FOR_BACKEND_ACCESS
                environment:
                  URL_BACKEND: backend
                  URL_FRONTEND: frontend
                  URL_BACKOFFICE: backoffice
                  NODE_ENV: production
              frontend_basico:
                restart: always
                deploy:
                  replicas: 1
                build:
                  context: "../colaborador-rentcar-frontend-basico"
                  dockerfile: "Dockerfile"
                expose: 
                  - 443
                networks:
                  - gateway
            secrets:
              REDISDB_PASSWORD:
                file: "../colaborador-rent-a-car-backend/secrets/redisdb_password.txt"
              REDISDB_PORT:
                file: "../colaborador-rent-a-car-backend/secrets/redisdb_port.txt"
              REDISDB_HOST:
                file: "../colaborador-rent-a-car-backend/secrets/redisdb_host.txt"
              PORT_FRONTEND:
                file: "../colaborador-rent-a-car-backend/secrets/port_frontend.txt"
              PORT_BACKEND:
                file: "../colaborador-rent-a-car-backend/secrets/port_backend.txt"
              ENDPOINT_VARIABLES_FRONTEND:
                file: "../colaborador-rent-a-car-backend/secrets/endpoint_variables_frontend.txt"
              TOKEN_FOR_BACKEND_ACCESS:
                file: "../colaborador-rent-a-car-backend/secrets/token_for_backend_access.txt"
              PORT_BACKOFFICE:
                file: "../colaborador-rent-a-car-backend/secrets/port_backoffice.txt"

            EOF
            ls && \
            export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock && \
            /home/alvaro/bin/docker pull sosan/backend-rentacarmallorca:latest && \
            /home/alvaro/bin/docker pull sosan/frontend-rentacarmallorca:latest && \
            /home/alvaro/bin/docker pull sosan/backoffice-rentacarmallorca:latest && \
            /usr/bin/docker-compose -f /tmp/deploy-compose.txt up -d
            /home/alvaro/bin/docker rmi $(/home/alvaro/bin/docker images | grep "<none>" | awk '{print $3}') 2>/dev/null || echo "No hay images por borrar"
            
            
