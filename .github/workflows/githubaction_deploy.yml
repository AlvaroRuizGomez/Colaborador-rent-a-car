name: backend
on:
  push:
    branches: [ backend ]
jobs:
  # test:
    # runs-on: ubuntu-20.04
    # steps:
      # - 
      #   name: Running Server & Testing API
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '14'
      #   run: |
      #     npm install
      #     NODE_ENV=production \
      #     PORT_BACKEND=${{ secrets.PORT_BACKEND }} \
      #     PORT_FRONTEND=${{ secrets.PORT_FRONTEND }} \
      #     REDISDB_PORT=${{ secrets.REDISDB_PORT }} \
      #     REDISDB_HOST=${{ secrets.REDISDB_HOST }} \
      #     REDISDB_PASSWORD=${{ secrets.REDISDB_PASSWORD }} \
      #     ENDPOINT_VARIABLES_FRONTEND=${{ secrets.ENDPOINT_VARIABLES_FRONTEND }} \
      #     node src/index.js
      #     NODE_ENV=production npm run test
      # - 
      #   name: Testing API
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '14'
      #   run: |
      #     NODE_ENV=production npm run test

  build_backend:
    runs-on: ubuntu-20.04
    # if: "contains(github.event.*.message, 'subir')"
    # if: github.event.*.message === "subir"
    if: "contains(github.event.head_commit.message, '/a')"
    steps:
      - name: Avoid redudant builds
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Get current date
        id: date
        run: echo ::set-output name=DATE_NOW::$(date +'%Y_%m_%dT%H_%M_%S')
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: | 
            sosan/backend-rentacarmallorca:${{steps.date.outputs.DATE_NOW}}
            sosan/backend-rentacarmallorca:latest
          secrets: |
            "PORT_BACKEND=${{ secrets.PORT_BACKEND }}"
            "PORT_FRONTEND=${{ secrets.PORT_FRONTEND }}"
            "PORT_BACKOFFICE=${{ secrets.PORT_BACKOFFICE }}"
            "REDISDB_PORT=${{ secrets.REDISDB_PORT }}"
            "REDISDB_HOST=${{ secrets.REDISDB_HOST }}"
            "REDISDB_PASSWORD=${{ secrets.REDISDB_PASSWORD }}"
            "ENDPOINT_VARIABLES_FRONTEND=${{ secrets.ENDPOINT_VARIABLES_FRONTEND }}"
            "TOKEN_FOR_BACKEND_ACCESS=${{ secrets.TOKEN_FOR_BACKEND_ACCESS }}"
            "TOKEN_PGP=${{ secrets.TOKEN_PGP }}"
            "PUBLIC_PGP=${{ secrets.PUBLIC_PGP }}"
            "PRIVATE_PGP=${{ secrets.PRIVATE_PGP }}"
      - name: Comandos SSH Servidor
        if: "contains(github.event.head_commit.message, '/b')"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_SERVIDOR }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY}}
          port:  ${{ secrets.PORT_SERVIDOR }}
          script: |
            ls && \
            echo "${{secrets.REDISDB_PASSWORD}}" > /tmp/redisdb_password.txt && \
            echo "${{secrets.REDISDB_PORT}}" > /tmp/redisdb_port.txt && \
            echo "${{secrets.REDISDB_HOST}}" > /tmp/redisdb_host.txt && \
            echo "${{secrets.PORT_FRONTEND}}" > /tmp/port_frontend.txt && \
            echo "${{secrets.PORT_BACKEND}}" > /tmp/port_backend.txt && \
            echo "${{secrets.PORT_BACKOFFICE}}" > /tmp/port_backoffice.txt && \
            echo "${{secrets.ENDPOINT_VARIABLES_FRONTEND}}" > /tmp/endpoint_variables_frontend.txt && \
            echo "${{secrets.TOKEN_FOR_BACKEND_ACCESS}}" > /tmp/token_for_backend_access.txt && \
            echo "${{secrets.TOKEN_PGP}}" > /tmp/token_pgp.txt && \
            echo "${{secrets.SERVER_CRT_SSL}}" > /home/alvaro/certs/server_http_cert.pem && \
            echo "${{secrets.SERVER_KEY_SSL}}" > /home/alvaro/certs/server_http_key.pem && \
            cat <<EOF > /tmp/deploy-compose.txt
            version: "3.7"
            networks:
              gateway: {}
            services:
              frontenvoy:
                image: sosan/envoy-rentacarmallorca:latest
                restart: always
                deploy:
                  replicas: 1
                depends_on:
                  - frontend
                links: 
                  - frontend
                  - backoffice
                expose:
                  - "80"
                  - "443"
                  - "3100"
                  # - "8080"
                  # - "8081"
                  # - "8443"
                ports: 
                  - "80:80"
                  - "443:443"
                  - "3100:3100"
                  # - "8080:8080"
                  # - "8081:8081"
                  # - "8443:8443"
                volumes:
                  - /home/alvaro/certs/server_http_cert.pem:/etc/cert.pem
                  - /home/alvaro/certs/server_http_key.pem:/etc/privkey.pem
                networks:
                  - gateway
              frontend:
                image: sosan/frontend-rentacarmallorca:latest
                restart: always
                deploy:
                  replicas: 1
                expose: 
                  - 8080
                environment:
                  URL_BACKEND: backend
                  URL_FRONTEND: frontend
                  NODE_ENV: production
                secrets:
                  - PORT_BACKEND
                  - ENDPOINT_VARIABLES_FRONTEND
                  - TOKEN_FOR_BACKEND_ACCESS
                networks:
                  - gateway
                  # - exterior
                  # - interior
                depends_on:
                  - backend
              backoffice:
                image: sosan/backoffice-rentacarmallorca:latest
                restart: always
                deploy:
                  replicas: 1
                expose: 
                  - 3100
                environment:
                  URL_BACKEND: backend
                  URL_BACKOFFICE: backoffice
                  NODE_ENV: production
                secrets:
                    - PORT_BACKEND
                    - PORT_BACKOFFICE
                    - ENDPOINT_VARIABLES_FRONTEND
                    - TOKEN_FOR_BACKEND_ACCESS
                networks:
                  - gateway
                  # - exterior
                  # - interior
                depends_on:
                  - backend
              backend:
                image: sosan/backend-rentacarmallorca:latest
                restart: always
                deploy:
                  replicas: 1
                expose: 
                  - 3000
                networks:
                  - gateway
                  # - interior
                secrets:
                  - PORT_FRONTEND
                  - PORT_BACKEND
                  - REDISDB_PORT
                  - REDISDB_HOST
                  - REDISDB_PASSWORD
                  - ENDPOINT_VARIABLES_FRONTEND
                  - TOKEN_FOR_BACKEND_ACCESS
                  - TOKEN_PGP
                  # - PUBLIC_PGP
                  # - PRIVATE_PGP
                environment:
                  URL_BACKEND: backend
                  URL_FRONTEND: frontend
                  URL_BACKOFFICE: backoffice
                  NODE_ENV: production
            secrets:
              REDISDB_PASSWORD:
                file: "/tmp/redisdb_password.txt"
              REDISDB_PORT:
                file: "/tmp/redisdb_port.txt"
              REDISDB_HOST:
                file: "/tmp/redisdb_host.txt"
              PORT_FRONTEND:
                file: "/tmp/port_frontend.txt"
              PORT_BACKEND:
                file: "/tmp/port_backend.txt"
              ENDPOINT_VARIABLES_FRONTEND:
                file: "/tmp/endpoint_variables_frontend.txt"
              TOKEN_FOR_BACKEND_ACCESS:
                file: "/tmp/token_for_backend_access.txt"
              TOKEN_PGP:
                file: "/tmp/token_pgp.txt"
              # PUBLIC_PGP:
              #   file: "/tmp/public_pgp.txt"
              # PRIVATE_PGP:
              #   file: "/tmp/private_pgp.txt"
              PORT_BACKOFFICE:
                file: "/tmp/port_backoffice.txt"
            EOF
            ls && \
            export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock && \
            /home/alvaro/bin/docker pull sosan/backend-rentacarmallorca:latest && \
            /home/alvaro/bin/docker pull sosan/frontend-rentacarmallorca:latest && \
            /home/alvaro/bin/docker pull sosan/backoffice-rentacarmallorca:latest && \
            /home/alvaro/bin/docker pull sosan/frontend-rentacarmallorca-basico:latest && \
            /home/alvaro/bin/docker pull sosan/envoy-rentacarmallorca:latest && \
            /usr/bin/docker-compose -f /tmp/deploy-compose.txt up -d
            /home/alvaro/bin/docker rmi $(/home/alvaro/bin/docker images | grep "<none>" | awk '{print $3}') 2>/dev/null || echo "No hay images por borrar"
            /home/alvaro/bin/docker system prune --force
            
